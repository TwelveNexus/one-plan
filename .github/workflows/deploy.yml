name: Deploy to Coolify

# Trigger on push to main branch (after successful tests)
on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual deployment
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

# Environment variables
env:
  COOLIFY_URL: ${{ secrets.COOLIFY_URL }}
  COOLIFY_TOKEN: ${{ secrets.COOLIFY_TOKEN }}

jobs:
  # Job 1: Deploy to Coolify
  deploy:
    name: Deploy to Coolify
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ secrets.COOLIFY_APP_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set deployment environment
        id: env
        run: |
          if [ "${{ github.event.inputs.environment }}" = "staging" ]; then
            echo "DEPLOY_ENV=staging" >> $GITHUB_OUTPUT
            echo "PROJECT_UUID=${{ secrets.COOLIFY_STAGING_PROJECT_UUID }}" >> $GITHUB_OUTPUT
          else
            echo "DEPLOY_ENV=production" >> $GITHUB_OUTPUT
            echo "PROJECT_UUID=${{ secrets.COOLIFY_PRODUCTION_PROJECT_UUID }}" >> $GITHUB_OUTPUT
          fi

      - name: Deploy API Gateway to Coolify
        uses: fjogeleit/http-request-action@v1
        with:
          url: '${{ env.COOLIFY_URL }}/api/v1/deploy'
          method: 'POST'
          customHeaders: '{"Authorization": "Bearer ${{ env.COOLIFY_TOKEN }}"}'
          data: |
            {
              "uuid": "${{ secrets.COOLIFY_API_GATEWAY_UUID }}",
              "force": true
            }

      - name: Deploy Identity Service to Coolify
        uses: fjogeleit/http-request-action@v1
        with:
          url: '${{ env.COOLIFY_URL }}/api/v1/deploy'
          method: 'POST'
          customHeaders: '{"Authorization": "Bearer ${{ env.COOLIFY_TOKEN }}"}'
          data: |
            {
              "uuid": "${{ secrets.COOLIFY_IDENTITY_SERVICE_UUID }}",
              "force": true
            }

      - name: Deploy Tenant Service to Coolify
        uses: fjogeleit/http-request-action@v1
        with:
          url: '${{ env.COOLIFY_URL }}/api/v1/deploy'
          method: 'POST'
          customHeaders: '{"Authorization": "Bearer ${{ env.COOLIFY_TOKEN }}"}'
          data: |
            {
              "uuid": "${{ secrets.COOLIFY_TENANT_SERVICE_UUID }}",
              "force": true
            }

      - name: Deploy Organization Service to Coolify
        uses: fjogeleit/http-request-action@v1
        with:
          url: '${{ env.COOLIFY_URL }}/api/v1/deploy'
          method: 'POST'
          customHeaders: '{"Authorization": "Bearer ${{ env.COOLIFY_TOKEN }}"}'
          data: |
            {
              "uuid": "${{ secrets.COOLIFY_ORGANIZATION_SERVICE_UUID }}",
              "force": true
            }

      - name: Deploy Project Service to Coolify
        uses: fjogeleit/http-request-action@v1
        with:
          url: '${{ env.COOLIFY_URL }}/api/v1/deploy'
          method: 'POST'
          customHeaders: '{"Authorization": "Bearer ${{ env.COOLIFY_TOKEN }}"}'
          data: |
            {
              "uuid": "${{ secrets.COOLIFY_PROJECT_SERVICE_UUID }}",
              "force": true
            }

      - name: Deploy Task Service to Coolify
        uses: fjogeleit/http-request-action@v1
        with:
          url: '${{ env.COOLIFY_URL }}/api/v1/deploy'
          method: 'POST'
          customHeaders: '{"Authorization": "Bearer ${{ env.COOLIFY_TOKEN }}"}'
          data: |
            {
              "uuid": "${{ secrets.COOLIFY_TASK_SERVICE_UUID }}",
              "force": true
            }

      - name: Deploy Requirement Service to Coolify
        uses: fjogeleit/http-request-action@v1
        with:
          url: '${{ env.COOLIFY_URL }}/api/v1/deploy'
          method: 'POST'
          customHeaders: '{"Authorization": "Bearer ${{ env.COOLIFY_TOKEN }}"}'
          data: |
            {
              "uuid": "${{ secrets.COOLIFY_REQUIREMENT_SERVICE_UUID }}",
              "force": true
            }

      - name: Deploy Storyboard Service to Coolify
        uses: fjogeleit/http-request-action@v1
        with:
          url: '${{ env.COOLIFY_URL }}/api/v1/deploy'
          method: 'POST'
          customHeaders: '{"Authorization": "Bearer ${{ env.COOLIFY_TOKEN }}"}'
          data: |
            {
              "uuid": "${{ secrets.COOLIFY_STORYBOARD_SERVICE_UUID }}",
              "force": true
            }

      - name: Deploy Integration Service to Coolify
        uses: fjogeleit/http-request-action@v1
        with:
          url: '${{ env.COOLIFY_URL }}/api/v1/deploy'
          method: 'POST'
          customHeaders: '{"Authorization": "Bearer ${{ env.COOLIFY_TOKEN }}"}'
          data: |
            {
              "uuid": "${{ secrets.COOLIFY_INTEGRATION_SERVICE_UUID }}",
              "force": true
            }

      - name: Deploy Notification Service to Coolify
        uses: fjogeleit/http-request-action@v1
        with:
          url: '${{ env.COOLIFY_URL }}/api/v1/deploy'
          method: 'POST'
          customHeaders: '{"Authorization": "Bearer ${{ env.COOLIFY_TOKEN }}"}'
          data: |
            {
              "uuid": "${{ secrets.COOLIFY_NOTIFICATION_SERVICE_UUID }}",
              "force": true
            }

      - name: Deploy Analytics Service to Coolify
        uses: fjogeleit/http-request-action@v1
        with:
          url: '${{ env.COOLIFY_URL }}/api/v1/deploy'
          method: 'POST'
          customHeaders: '{"Authorization": "Bearer ${{ env.COOLIFY_TOKEN }}"}'
          data: |
            {
              "uuid": "${{ secrets.COOLIFY_ANALYTICS_SERVICE_UUID }}",
              "force": true
            }

      - name: Deploy Subscription Service to Coolify
        uses: fjogeleit/http-request-action@v1
        with:
          url: '${{ env.COOLIFY_URL }}/api/v1/deploy'
          method: 'POST'
          customHeaders: '{"Authorization": "Bearer ${{ env.COOLIFY_TOKEN }}"}'
          data: |
            {
              "uuid": "${{ secrets.COOLIFY_SUBSCRIPTION_SERVICE_UUID }}",
              "force": true
            }

      - name: Wait for deployments to complete
        run: |
          echo "Waiting for all deployments to complete..."
          sleep 120  # Wait 2 minutes for deployments

      - name: Health check deployed services
        run: |
          # Health check function
          check_service_health() {
            local service_name=$1
            local service_url=$2
            local max_attempts=30
            local attempt=1

            echo "Checking health of $service_name..."

            while [ $attempt -le $max_attempts ]; do
              if curl -f -s --max-time 10 "$service_url/actuator/health" > /dev/null; then
                echo "✅ $service_name is healthy"
                return 0
              else
                echo "⏳ $service_name not ready yet (attempt $attempt/$max_attempts)"
                sleep 10
                ((attempt++))
              fi
            done

            echo "❌ $service_name failed health check"
            return 1
          }

          # Check all services
          check_service_health "API Gateway" "${{ secrets.COOLIFY_API_GATEWAY_URL }}"
          check_service_health "Identity Service" "${{ secrets.COOLIFY_IDENTITY_SERVICE_URL }}"
          check_service_health "Tenant Service" "${{ secrets.COOLIFY_TENANT_SERVICE_URL }}"
          check_service_health "Organization Service" "${{ secrets.COOLIFY_ORGANIZATION_SERVICE_URL }}"
          check_service_health "Project Service" "${{ secrets.COOLIFY_PROJECT_SERVICE_URL }}"
          check_service_health "Task Service" "${{ secrets.COOLIFY_TASK_SERVICE_URL }}"
          check_service_health "Requirement Service" "${{ secrets.COOLIFY_REQUIREMENT_SERVICE_URL }}"
          check_service_health "Storyboard Service" "${{ secrets.COOLIFY_STORYBOARD_SERVICE_URL }}"
          check_service_health "Integration Service" "${{ secrets.COOLIFY_INTEGRATION_SERVICE_URL }}"
          check_service_health "Notification Service" "${{ secrets.COOLIFY_NOTIFICATION_SERVICE_URL }}"
          check_service_health "Analytics Service" "${{ secrets.COOLIFY_ANALYTICS_SERVICE_URL }}"
          check_service_health "Subscription Service" "${{ secrets.COOLIFY_SUBSCRIPTION_SERVICE_URL }}"

  # Job 2: Post-deployment tests
  post-deployment-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against deployed services..."

          # Test API Gateway
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.COOLIFY_API_GATEWAY_URL }}/actuator/health)
          if [ "$response" = "200" ]; then
            echo "✅ API Gateway smoke test passed"
          else
            echo "❌ API Gateway smoke test failed (HTTP $response)"
            exit 1
          fi

          # Test authentication endpoint
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.COOLIFY_API_GATEWAY_URL }}/api/v1/auth/health || echo "000")
          if [ "$response" = "200" ] || [ "$response" = "404" ]; then
            echo "✅ Authentication endpoint accessible"
          else
            echo "❌ Authentication endpoint not accessible (HTTP $response)"
            exit 1
          fi

      - name: Run API tests
        run: |
          echo "Running API integration tests..."
          # Add your API testing commands here
          # For example, using Newman (Postman CLI) or curl scripts

          # Example: Test user registration flow
          # curl -X POST ${{ secrets.COOLIFY_API_GATEWAY_URL }}/api/v1/auth/register \
          #   -H "Content-Type: application/json" \
          #   -d '{"email":"test@example.com","password":"testpass123"}'

  # Job 3: Notify deployment success
  notify-success:
    name: Notify Deployment Success
    runs-on: ubuntu-latest
    needs: [deploy, post-deployment-tests]
    if: success()

    steps:
      - name: Notify deployment success
        run: |
          echo "🎉 Deployment to ${{ steps.env.outputs.DEPLOY_ENV || 'production' }} completed successfully!"
          echo "All services are healthy and running."
          echo "API Gateway: ${{ secrets.COOLIFY_API_GATEWAY_URL }}"

      - name: Send Slack notification (optional)
        if: ${{ secrets.SLACK_WEBHOOK }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🚀 One Plan deployment to ${{ steps.env.outputs.DEPLOY_ENV || 'production' }} completed successfully!

            ✅ All 12 microservices deployed
            ✅ Health checks passed
            ✅ Smoke tests passed

            API Gateway: ${{ secrets.COOLIFY_API_GATEWAY_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Job 4: Rollback on failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy, post-deployment-tests]
    if: failure()

    steps:
      - name: Trigger rollback
        run: |
          echo "❌ Deployment failed. Initiating rollback..."
          # Add rollback logic here if needed
          # This could involve calling Coolify API to rollback to previous version

      - name: Notify deployment failure
        if: ${{ secrets.SLACK_WEBHOOK }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ❌ One Plan deployment to ${{ steps.env.outputs.DEPLOY_ENV || 'production' }} failed!

            Please check the GitHub Actions logs for details.
            Rollback may be required.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
